#pragma once


#include "ofMain.h"
#include "Poco/RWLock.h"
#include "Poco/Net/TCPServer.h"
#include "Poco/Net/TCPServerParams.h"
#include "Poco/Net/TCPServerConnection.h"
#include "Poco/Net/Socket.h"


/* 
 ofxTCPPocoConnectionHandler.
 - used by ofxTCPPocoServer to handle connections from clients (threaded)
 - following poco TCPServerConnection interface, object gets generated by a TCPServerConnectionFactory
 - handles receving messages from clients - a new ofxTCPPocoConnectionHandler is created for each client
 - non-blocking for receiving
 - sending is blocking
 
 TODO: need to decide on a consistent messaging format, eg. bytes by size, bytes until delimeter
 - thinking a header send (int with msg size) followed by msg send
 - "message framing" protocol
 - maybe add option non-blocking send
 */

class ofxTCPPocoConnectionHandler : public Poco::Net::TCPServerConnection {
public:
    
    ofxTCPPocoConnectionHandler(const Poco::Net::StreamSocket& client); // : Poco::Net::TCPServerConnection(client);
    ~ofxTCPPocoConnectionHandler();
    
    // set via connection factory
    int clientId;
    
    // thread/poco runnable
    ofMutex mutex;
    void run(); // async thread loop
    bool isRunning;
    
    
    // receiving- non blocking
    // messages are automatically queued in the run loop, use hasWaitingMessages(), and getRawBuffer() to get the messages
    bool hasWaitingMessage();
    // receive size needs to be updated if receiving anything larger than TCPPOCO_DEFAULT_MSG_SIZE
    void setReceiveBufferSize(int size); // this need to be configured per message
    void getRawBuffer(ofBuffer& buffer); // pops from receivedBuffers queue
    void flush();
    
    
    // sending- blocking
    bool sendRawBuffer(ofBuffer& buffer);
    bool sendRawBuffer(const char* buffer, int size);
    bool sendMessage(string& message);
    
    
    // close events
    ofEvent<int> closeEvent;
    ofEvent<int> getCloseEvent();
    
    int sleepTime; //?
    
protected:
    
    // receive
    bool waitingMessage;
    queue<ofBuffer> receivedBuffers;
    int receiveBufferSize;
    
    // main receive/send functions
    bool recvBytes(char* bytes, int size);
    bool sendBytes(const char* bytes, int size);

    // had to add this to avoid server crashing on exit when client closes
    bool markSocketForDelete;
};

